---
layout: default
title: micro-ROS for extremely resource constrained devices
abstract:
  While standard ROS2 can run on Linux-class embedded devices, smaller micro-controllers are still a challenge. 
  For example, ARM Cortex-M3 and -M4 class micro-controllers are popular for motion control and sensor integration,
  but have little RAM and storage. Also, they are often running with small batteries, e.g. for environmental sensors, 
  or small consumer robots, which requires efficient power management. micro-ROS aims to address these devices through 
  a combination of specialized, but ROS2 interoperable, communication, as well as the use of small Real-Time Operating 
  Systems (RTOSs).
author: '[Ingo LÃ¼tkebohle](https://github.com/iluetkeb)'
published: false
---

- This will become a table of contents (this text will be scraped).
{:toc}

# {{ page.title }}

<div class="abstract" markdown="1">
{{ page.abstract }}
</div>

Original Author: {{ page.author }}

## Use Cases

We have two main use-cases in mind:
 
 1. Connecting a micro-controller-based control and sensor board to a more powerful compute device within one robot
 1. Communication between a robot and sensors in the environment  

## Issues with using ROS2 as-is

ROS2 has targeted embedded devices as well, so why can we not use that directly? There are a number of issues, most of which 
relate to the use of DDS:

 - DDS is a powerful, but also very complex middleware approach. Despite several attempts at shrinking implementations, 
   the DDS part alone is usually too big for a micro-controller
 - DDS also requires devices to be listening all the time, which we might not want to do for battery-operated devices
 - The data traffic from DDS can easily overwhelm low-bandwidth links.
